#!/usr/bin/python

usage = "lvalert_heartbeat-test [--options]"
description = "a script that tests the heartbeat functionality. NOTE: this only tests the library fuctions within lvalert_heartbeat.py and does not test lvalert_heartbeat-client, lvalert_heartbeat-server, or lvalertMP_heartbeat.py"
author = "Reed Essick (reed.essick@ligo.org)"

#-------------------------------------------------

import os
import multiprocessing as mp

from lvalertHeartbeat import lvalert_heartbeat

from optparse import OptionParser

#-------------------------------------------------

parser = OptionParser(usage=usage, description=description)

parser.add_option('-v', '--verbose', default=False, action='store_true',
    help="print information during execution")
parser.add_option('-V', '--Verbose', default=False, action='store_true',
    help="print even more information during execution")

parser.add_option('-s', '--server', default='lvalert.cgca.uwm.edu', type='string',
    help="the LVAlert server")
parser.add_option('-n', '--node', default=None, type='string',
    help="the LVAlert pubsub node")
parser.add_option('-N', '--netrc', default=os.getenv('NETRC', os.path.expanduser('~/.netrc')), type='string',
    help="the NETRC file containing username,password for --server. DEFAULT references the environmental variable $NETRC if it is set, otherwise points to ~/.netrc")

parser.add_option('', '--wait', default=1.0, type='float',
    help="how long we wait in each loop of the pyxmpp Client")
parser.add_option('', '--timeout', default=10.0, type='float',
    help="how long we wait for responses within lvalert_heartbeat.poll")

parser.add_option('', '--request', default=False, action='store_true',
    help="test sending a request")
parser.add_option('', '--respond', default=False, action='store_true',
    help="test sending a response")
parser.add_option('', '--poll', default=False, action='store_true',
    help="test polling the network")

parser.add_option('', '--listen', default=False, action='store_true',
    help='listen to the node in addition to publishing requests and responses')

opts, args = parser.parse_args()

opts.verbose = opts.verbose or opts.Verbose

#-------------------------------------------------

if opts.listen:
    if opts.verbose:
        print( "setting up listener to monitor what is sent" )
    username, _, password = lvalert_heartbeat.NETRC.netrc(opts.netrc).authenticators(opts.server)
    client = lvalert_heartbeat.HeartbeatPollClient( 
        lvalert_heartbeat.JID(username+"@"+opts.server+"/"+lvalert_heartbeat.randkey()),
        password,
        opts.node,
        verbose=opts.Verbose,
    )

    client.connect()
    proc = mp.Process(target=client.loop, args=(opts.wait,))
    proc.start()

#-------------------------------------------------

if opts.request: 
    if opts.verbose:
        print( "testing lvalert_hearbeat.request" )

    key = lvalert_heartbeat.randkey()
    lvalert_heartbeat.request( key, opts.server, opts.node, netrc=opts.netrc, verbose=opts.Verbose )

#------------------------

if opts.respond:
    if opts.verbose:
        print( "testing lvalert_heartbeat.respond" )

    ### generate a request
    key = lvalert_heartbeat.randkey()
    packet = lvalert_heartbeat.Packet(opts.server, opts.node, ptype='request', key=key)

    ### responding to that request
    name = 'lvalert_heartbeat-test'
    lvalert_heartbeat.respond( name, packet, netrc=opts.netrc, verbose=opts.Verbose )

#------------------------

if opts.poll:
    if opts.verbose:
        print( "testing lvalert_heartbeat.poll" )

    ### poll a network of listeners
    responses = lvalert_heartbeat.poll(opts.server, opts.node, netrc=opts.netrc, wait=opts.wait, timeout=opts.timeout, verbose=opts.Verbose)
    if opts.Verbose:
        for response in responses:
            print response.dumps()

#-------------------------------------------------

### clean up forked process
if opts.listen:
    proc.terminate()
    proc.join() ### just to make sure cleanup signal is sent
    client.disconnect()
