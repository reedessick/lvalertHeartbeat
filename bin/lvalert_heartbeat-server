#!/usr/bin/python

usage = "lvalert_heartbeat-server [--options] config.ini"
description = "a simple executable that handles functionality checks via a \"heartbeat\""
author = "Reed Essick (reed.essick@ligo.org)"

#-------------------------------------------------

import lvalert_heartbeat

from ConfigParser import SafeConfigParser

from optparse import OptionParser

#-------------------------------------------------

parser = OptionParser(usage=usage, description=description)

parser.add_option('-v', '--verbose', default=False, action='store_true')

opts, args = parser.parse_args()

assert len(args)==1, 'please supply exactly 1 input argument\n%s'%usage
configname = args[0]

#-------------------------------------------------

### read in config file
if opts.verbose:
    print( "reading config : %s"%configname )
config = SafeConfigParser()
config.read(configname)

### iterate over sections, polling once for each section
for node in config.sections():

    ### extract setup for this node
    server = config.get(node, 'server')
    netrc  = os.path.expanduser(config.get(node, 'netrc')) if config.has_option(node, netrc) \
        else os.getenv('NETRC', os.path.join(os.path.expanduser('~'), '.netrc'))

    wait   = config.getfloat(node, 'wait')
    timeout = config.getfloat(node, 'timeout')

    ### extract expected respones and format them
    expected_respones = [lvalert_heartbeat.Packet(server, node, **dict(zip('name user hostname'.split(), _.split()))) for _ in config.get(node, 'responses').split('\n') if _]

    ### actually poll this node
    if opts.verbose:
        print( "polling network via %s->%s"%(server, node) )
    respones = lvalert_heartbeat.poll(server, node, netrc=netrc, wait=wait, timeout=timeout, verbose=opts.verbose)

    ### compare expected respones to observed responses
    matching = []
    missing = []
    for expected in expected_responses:
        for i in xrange(len(responses)):
            response = responses[i]
            if (expected['name']==response['name']) and (expected['user']==response['user']) and (expected['hostname']==response['hostname']):
                matching.append( expected, responses.pop(i) )
                break
        else:
            missing.append( expected )

    ### report the result
    ### FIXME we'll want to convert this into Nagios-friendly format for the production code...
    print( "matching responses : " )
    for expected, response in matching:
        print( "    expected : %s\n    recieved : %s\n"%(expected.dumps(), received.dumps()) )

    print( "missing responses : " )
    for expected in missing:
        print( "    expected : %s\n"%(expected.dumps()) )

    print( "extra responses : " )
    for response in responses:
        print( "    received : %s\n"%(received.dumps()) )
